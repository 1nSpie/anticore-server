import * as XLSX from 'xlsx';
import { PrismaClient } from '@prisma/client';
import * as path from 'path';
import * as fs from 'fs';

const prisma = new PrismaClient();

const classes = [
  {
    segment: 1,
    standartML: 18000,
    standartMLBody: 20000,
    complexML: 23000,
    complexMLBody: 25000,
  },
  {
    segment: 2,
    standartML: 21000,
    standartMLBody: 23000,
    complexML: 28000,
    complexMLBody: 30000,
  },
  {
    segment: 3,
    standartML: 24000,
    standartMLBody: 26000,
    complexML: 33000,
    complexMLBody: 35000,
  },
  {
    segment: 4,
    standartML: 27000,
    standartMLBody: 29000,
    complexML: 38000,
    complexMLBody: 40000,
  },
  {
    segment: 5,
    standartML: 30000,
    standartMLBody: 32000,
    complexML: 43000,
    complexMLBody: 45000,
  },
  {
    segment: 6,
    standartML: 33000,
    standartMLBody: 35000,
    complexML: 48000,
    complexMLBody: 50000,
  },
];

async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const filePath = path.join(__dirname, 'table.xlsx');
    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    console.log('üìñ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª...');
    const workbook = XLSX.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–∏—Å—Ç –≤ JSON —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    const jsonData = XLSX.utils.sheet_to_json(worksheet, {
      header: 1,
    }) as any[][];
    const headers = jsonData[0] as string[];

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${jsonData.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.join(', ')}`);

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    await prisma.bodyTypePrice.deleteMany({});
    await prisma.car.deleteMany({});
    await prisma.brand.deleteMany({});

    let processedRows = 0;
    let skippedRows = 0;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    for (let i = 1; i < jsonData.length; i++) {
      const row = jsonData[i] as any[];

      if (!row || !row[0]) {
        skippedRows++;
        continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      }

      const brandName: string = row[0]?.toString().trim();
      const modelName = row[1]?.toString().trim();
      const segment = parseInt(row[2]) || 1;

      if (!brandName || !modelName) {
        console.log(
          `‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±—Ä–µ–Ω–¥ –∏–ª–∏ –º–æ–¥–µ–ª—å`,
        );
        skippedRows++;
        continue;
      }

      try {
        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±—Ä–µ–Ω–¥
        let brand = await prisma.brand.findFirst({
          where: { name: brandName },
        });

        if (!brand) {
          brand = await prisma.brand.create({
            data: { name: brandName },
          });
          console.log(`‚ú® –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±—Ä–µ–Ω–¥: ${brandName}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å —É —ç—Ç–æ–≥–æ –±—Ä–µ–Ω–¥–∞
        const existingCar = await prisma.car.findFirst({
          where: {
            model: modelName,
            brandId: brand.id,
          },
        });

        if (existingCar) {
          console.log(
            `‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${brandName} ${modelName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`,
          );
          skippedRows++;
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        await prisma.car.create({
          data: {
            model: modelName,
            brandId: brand.id,
            segment: segment,
          },
        });

        console.log(
          `üöó –°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${brandName} ${modelName} (—Å–µ–≥–º–µ–Ω—Ç: ${segment})`,
        );

        await prisma.bodyTypePrice.createMany({
          data: classes,
          skipDuplicates: true,
        });

        console.log(`üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ü–µ–Ω: ${classes.length}`);
        processedRows++;
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ ${i + 1} (${brandName} ${modelName}):`,
          error,
        );
        skippedRows++;
      }
    }

    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:');
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedRows}`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${skippedRows}`);
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${jsonData.length - 1}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const brandsCount = await prisma.brand.count();
    const carsCount = await prisma.car.count();
    const pricesCount = await prisma.bodyTypePrice.count();

    console.log('\nüéØ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log(`üè¢ –ë—Ä–µ–Ω–¥–æ–≤: ${brandsCount}`);
    console.log(`üöó –ú–æ–¥–µ–ª–µ–π: ${carsCount}`);
    console.log(`üí∞ –¶–µ–Ω: ${pricesCount}`);

    console.log('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
    throw error;
  }
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', e.message);
  })
  .finally(async () => await prisma.$disconnect());
